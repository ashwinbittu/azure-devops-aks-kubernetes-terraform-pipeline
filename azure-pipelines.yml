trigger:
- main

pool:
  name: Default
#  demands:
#   - agent.name -equals ado-agent1-vm 

#pool:
#  vmImage: 'ubuntu-latest'

variables:
- name: DEV_ENVIRONMENT
  value: dev 
- name: QA_ENVIRONMENT
  value: qa 

# Stage-1: Terraform Validate Stage
## Step-1: Publish Artifacts to Pipeline (Pipeline artifacts provide a way to share files between stages in a pipeline or between different pipelines. )
## Step-2: Install Latest Terraform (0.13.5) (Ideally not needed if we use default Ubuntu Agents)
## Step-3: Validate Terraform Manifests (terraform init, terraform validate)

stages:
- stage: TerraformValidate
  jobs:
    - job: TerraformValidateJob
      continueOnError: false
      steps:
      - task: PublishPipelineArtifact@1
        displayName: Publish Artifacts
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          artifact: 'terraform-manifests-out'
          publishLocation: 'pipeline'
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
        inputs:
          terraformVersion: 'latest'
      #- task: TerraformCLI@0
      #  displayName: Terraform Init
      #  inputs:
      #    command: 'init'
      #    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
      #    backendType: 'azurerm'
      #    backendServiceArm: 'terraform-aks-azurerm-svc-con'
      #    backendAzureRmResourceGroupName: 'terraform-storage-rg'
      #    backendAzureRmStorageAccountName: 'terraformstatexlrwdrzs'
      #    backendAzureRmContainerName: 'tfstatefiles'
      #    backendAzureRmKey: 'aks-base.tfstate'
      #    allowTelemetryCollection: false
      - task: TerraformCLI@0
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          backendType: 'azurerm'
          backendServiceArm: 'Azure subscription 1(37565286-71fe-4f4d-bde1-8f99918e786a)'
          ensureBackend: true
          backendAzureRmResourceGroupName: 'terraform-tracker-backend-rg'
          backendAzureRmResourceGroupLocation: 'Australia East'
          backendAzureRmStorageAccountName: 'trackerappstorageaccnt'
          backendAzureRmContainerName: 'trackerappblobcont'
          backendAzureRmKey: 'aks-base.tfstate'
          allowTelemetryCollection: false
      - task: TerraformCLI@0
        displayName: Terraform Validate
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          allowTelemetryCollection: false 
- stage: DeployAKSClusters
  jobs:
    - deployment: DeployDevAKSCluster
      displayName: DeployDevAKSCluster
      pool:
        vmImage: 'ubuntu-latest'
      environment: $(DEV_ENVIRONMENT)      
      strategy:
        runOnce:
          deploy:
            steps:            
            #- task: DownloadSecureFile@1
            #  displayName: Download SSH Key
            #  name: sshkey
            #  inputs:
            #    secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'
            - task: TerraformCLI@0
              displayName: Terraform Init
              inputs:
                command: 'init'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                backendType: 'azurerm'
                backendServiceArm: 'Azure subscription 1(37565286-71fe-4f4d-bde1-8f99918e786a)'
                backendAzureRmResourceGroupName: 'terraform-tracker-backend-rg'
                backendAzureRmResourceGroupLocation: 'Australia East'
                backendAzureRmStorageAccountName: 'trackerappstorageaccnt'
                backendAzureRmContainerName: 'trackerappblobcont'
                backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'
                allowTelemetryCollection: false
                ensureBackend: true               
            - task: TerraformCLI@0
              displayName: Terraform Plan
              inputs:
                command: 'plan'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                #environmentServiceName: 'terraform-aks-azurerm-svc-con'
                environmentServiceName: 'Azure subscription 1(37565286-71fe-4f4d-bde1-8f99918e786a)'
                commandOptions: '-var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                #commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                allowTelemetryCollection: false
            - task: TerraformCLI@0
              displayName: Terraform Apply
              inputs:
                command: 'apply'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                #environmentServiceName: 'terraform-aks-azurerm-svc-con'
                environmentServiceName: 'Azure subscription 1(37565286-71fe-4f4d-bde1-8f99918e786a)'
                commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                allowTelemetryCollection: false
            - task: TerraformCLI@0
              displayName: Terraform Destroy
              inputs:
                command: 'destroy'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                #environmentServiceName: 'terraform-aks-azurerm-svc-con'
                environmentServiceName: 'Azure subscription 1(37565286-71fe-4f4d-bde1-8f99918e786a)'
                commandOptions: '-var environment=$(DEV_ENVIRONMENT)'
                #commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                allowTelemetryCollection: false